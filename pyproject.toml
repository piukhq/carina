[tool.poetry]
name = "carina"
version = "0.0.0"
description = "BPL Rewards Management System"
authors = ["Bink <bink@bink.bink>"]
readme = "README.md"
repository = "https://github.com/binkhq/carina"

[[tool.poetry.source]]
name = "bink-pypi"
url = "https://pypi.tools.uksouth.bink.sh/simple"
default = false
secondary = false

[tool.poetry.dependencies]
python = "^3.10"
fastapi = "^0.95.0"
uvicorn = {extras = ["standard"], version = "^0.18.3"}
sqlalchemy = {extras = ["asyncio"], version = "^1.4.41"}
alembic = "^1.8.1"
pydantic = "^1.10.2"
asyncpg = "^0.26.0"
psycopg2-binary = "^2.9.3"
prettyprinter = "^0.18.0"
ujson = "^5.5.0"
sentry-sdk = "^1.17.0"
prometheus-client = "==0.12.0"  # make sure polaris.core.cli monkeypatch is still needed and functioning
blinker = "^1.5"
gunicorn = "^20.1.0"
requests = "^2.28.1"
rq = "^1.11.0"
redis = "^4.3.4"
hiredis = "^1.0.2"
tenacity = "^8.0.1"
azure-identity = "^1.10.0"
azure-keyvault = "^4.2.0"
azure-storage-blob = "==12.8.1"   # version 12.9.0 & 12.10.0 have bad type annotations
APScheduler = "^3.9.1"
PyYAML = "^6.0"
typer = "^0.6.1"
cryptography = "^39.0.1"
retry-tasks-lib = {version = "2.0.*", source = "bink-pypi"}
cosmos-message-lib = {version = "^1.2.0", source = "bink-pypi"}
fastapi-prometheus-metrics = {version = "^0.2.3", source = "bink-pypi"}
future = "^0.18.3"

[tool.poetry.group.dev.dependencies]
isort = "^5.10.1"
black = "^22.8.0"
mypy = "^1.2.0"
ipython = "^8.5.0"
pytest = "^7.1.3"
pytest-cov = "^3.0.0"
xenon = "^0.9.0"
httpretty = "^1.1.4"
pytest-asyncio = "^0.19.0"
SQLAlchemy-Utils = "^0.38.3"
pytest-mock = "^3.8.2"
types-redis = "^4.3.20"
types-requests = "^2.28.10"
types-PyYAML = "^6.0.11"
testfixtures = "^7.0.0"
httpx = "^0.24.0"
refurb = "^1.16.0"
ruff = "^0.0.263"

[tool.poetry.scripts]
carina = 'carina.core.cli:cli'

[tool.black]
line-length = 120

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 120
skip_gitignore = true
lines_between_types = 1

[tool.mypy]
disallow_untyped_defs = true
show_error_codes = true
warn_unused_ignores = true
ignore_missing_imports = true
plugins = [
    "pydantic.mypy",
    "sqlalchemy.ext.mypy.plugin",
]

[tool.ruff]
line-length = 120
show-source = true
target-version = "py310"
select = [
    "F",    # Pyflakes (F)
    "E",
    "W",    # pycodestyle (E, W)
    "C90",  # mccabe (C90)
    # isort (I)
    # pydocstyle (D)
    "UP",   # pyupgrade (UP)
    "N",    # pep8-naming (N)
    "YTT",  # flake8-2020 (YTT)
    "ANN",  # flake8-annotations (ANN)
    "S",    # flake8-bandit (S)
    "BLE",  # flake8-blind-except (BLE)
    # flake8-boolean-trap (FBT)
    "B",    # flake8-bugbear (B)
    "A",    # flake8-builtins (A)
    "C4",   # flake8-comprehensions (C4)
    "T10",  # flake8-debugger (T10)
    # flake8-errmsg (EM)
    "ICN",  # flake8-import-conventions (ICN)
    "T20",  # flake8-print (T20)
    # "PT",   # flake8-pytest-style (PT)
    "Q",    # flake8-quotes (Q)
    # flake8-return (RET)
    "SIM",  # flake8-simplify (SIM)
    "TID",  # flake8-tidy-imports (TID)
    "ARG",  # flake8-unused-arguments (ARG)
    "DTZ",  # flake8-datetimez (DTZ)
    "ERA",  # eradicate (ERA) until we can remove commented out code this has to stay deactivated
    # pandas-vet (PD)
    # pygrep-hooks (PGH)
    "PLC",
    "PLE",
    "PLR",
    "PLW",  # Pylint (PLC, PLE, PLR, PLW)
    "RUF",  # Ruff-specific rules (RUF)
]
ignore = [
    "ANN101",
    "ANN102",
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed
    # disables function call in function parameter error
    # arg = typer.Option(..) would be flagged
    "B008",
    "ARG001", # Unused function argument
    "BLE001", # Do not catch blind exception: `Exception`
    "N818", # Exception name should be named with an Error suffix
    "PLR2004", # Magic value used in comparison
    "RUF006", # Store a reference to the return value of `asyncio.create_task` we do this in cosmos
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401", "F403"]
"tests/*" = ["S101", "S105", "S311", "PLR2004", "ARG001", "PLR0913", "PLR0915", "ARG002"]

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
pattern = '^((?P<epoch>\d+)!)?(?P<base>\d+(\.\d+)*)'

[tool.poetry-dynamic-versioning.substitution]
files = ['carina/version.py']

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"
