"""remove old retry tables

Revision ID: 2c286f5fe73a
Revises: 35b969f1e965
Create Date: 2021-10-05 12:44:43.320533

"""
import sqlalchemy as sa

from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision = "2c286f5fe73a"
down_revision = "35b969f1e965"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("voucher_allocation")
    op.drop_index("ix_voucher_config_id", table_name="voucher_config")
    op.drop_index("ix_voucher_update_id", table_name="voucher_update")
    op.drop_column("voucher_update", "retry_status")
    op.drop_column("voucher_update", "response_data")
    op.drop_column("voucher_update", "attempts")
    op.drop_column("voucher_update", "next_attempt_time")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "voucher_update", sa.Column("next_attempt_time", postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.add_column("voucher_update", sa.Column("attempts", sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column(
        "voucher_update",
        sa.Column("response_data", postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),  # type: ignore [call-arg]
    )
    op.add_column(
        "voucher_update",
        sa.Column(
            "retry_status",
            postgresql.ENUM("FAILED", "IN_PROGRESS", "PENDING", "SUCCESS", "WAITING", name="queuedretrystatuses"),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.create_index("ix_voucher_update_id", "voucher_update", ["id"], unique=False)
    op.create_index("ix_voucher_config_id", "voucher_config", ["id"], unique=False)
    op.create_table(
        "voucher_allocation",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("timezone('utc'::text, CURRENT_TIMESTAMP)"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("timezone('utc'::text, CURRENT_TIMESTAMP)"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "status",
            postgresql.ENUM("FAILED", "IN_PROGRESS", "PENDING", "SUCCESS", "WAITING", name="queuedretrystatuses"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("attempts", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("account_url", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("issued_date", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("expiry_date", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("next_attempt_time", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column("response_data", postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),  # type: ignore [call-arg]
        sa.Column("voucher_id", postgresql.UUID(), autoincrement=False, nullable=True),
        sa.Column("voucher_config_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["voucher_config_id"],
            ["voucher_config.id"],
            name="voucher_allocation_voucher_config_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["voucher_id"], ["voucher.id"], name="voucher_allocation_voucher_id_fkey", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id", name="voucher_allocation_pkey"),
    )
    op.create_index("ix_voucher_allocation_id", "voucher_allocation", ["id"], unique=False)
    # ### end Alembic commands ###
